import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState, useEffect } from 'react'
import type { BasicProfile } from "@datamodels/identity-profile-basic";

import ceramicLogo from '../public/ceramic.png'
import { useCeramicContext, datastore } from '../context'
import { authenticateCeramic } from '../utils'
import styles from '../styles/Home.module.css'

const Home: NextPage = () => {
  const ceramic = useCeramicContext() // access our Ceramic instance from `../context/index.tsx
  const [profile, setProfile] = useState<BasicProfile | undefined>()

  const handleLogin = async () => {
    await authenticateCeramic(ceramic)
    await getProfile()
  }

  const getProfile = async () => {
    if(ceramic.did !== undefined) {
      const profile = await datastore.get('basicProfile')
      setProfile(profile)
    }
  }
  
  /**
   * On load check if there is a DID-Session in local storage.
   * If there is a DID-Session we can immediately authenticate the user.
   * For more details on how we do this check the 'authenticateCeramic function in`../utils`.
   */
  useEffect(() => {
    if(localStorage.getItem('did')) {
      handleLogin()
    }
  }, [ ])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Your Decentralized Profile</h1>
        <Image
          src={ceramicLogo}
          width="100"
          height="100"
          className={styles.logo}
        />
        {profile === undefined ? (
          <button
            onClick={() => {
              handleLogin();
            }}
          >
            Login
          </button>
        ) : (
          <div className={styles.form}>
            <div className={styles.formGroup}>
              <label>Name</label>
              <input
                type="text"
                defaultValue={profile?.name || ""}
                onChange={(e) => {
                  setProfile({ ...profile, name: e.target.value });
                }}
              />
            </div>
            <div className={styles.formGroup}>
              <label>Description</label>
              <input
                type="text"
                defaultValue={profile?.description || ""}
                onChange={(e) => {
                  setProfile({ ...profile, description: e.target.value });
                }}
              />
            </div>
            <div className={styles.formGroup}>
              <label>Gender</label>
              <input
                type="text"
                defaultValue={profile?.gender || ""}
                onChange={(e) => {
                  setProfile({ ...profile, gender: e.target.value });
                }}
              />
            </div>
            <div className={styles.formGroup}>
              <label>Emoji</label>
              <input
                type="text"
                defaultValue={profile?.emoji || ""}
                onChange={(e) => {
                  setProfile({ ...profile, emoji: e.target.value });
                }}
                maxLength={2}
              />
            </div>
            <div className={styles.buttonContainer}>
              <button
                onClick={() => {
                  datastore.merge("basicProfile", {
                    name: profile.name,
                    description: profile.description,
                    gender: profile.gender,
                    emoji: profile.emoji,
                  });
                }}
              >
                Update Profile
              </button>
            </div>
          </div>
        )}
      </main>
      <footer className={styles.footer}>
        <div>
          <a href="https://developers.ceramic.network" target="_blank">
            Learn about Ceramic
          </a>
        </div>
        <div>
          <a href="https://forum.ceramic.network" target="_blank">
            Ask Questions
          </a>
        </div>
      </footer>
    </div>
  );
}

export default Home
